#name "arith.cool"
 CLASS
 TYPEID A
 '{' 
 OBJECTID var
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 ';' 
 OBJECTID value
 '(' 
 ')' 
 ':' 
 TYPEID Int
 '{' 
 OBJECTID var
 '}' 
 ';' 
 OBJECTID set_var
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID SELF_TYPE
 '{' 
 '{' 
 OBJECTID var
 ASSIGN
 OBJECTID num;
 OBJECTID self;
 '}' 
 '}' 
 ';' 
 OBJECTID method1
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID SELF_TYPE
 '{' 
 OBJECTID self
 '}' 
 ';' 
 OBJECTID method2
 '(' 
 OBJECTID num1
 ':' 
 TYPEID Int,
 OBJECTID num2
 ':' 
 TYPEID Int)
 ':' 
 TYPEID B
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num1
 OBJECTID num2;
 '(' 
 NEW
 TYPEID B).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method3
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID C
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num;
 '(' 
 NEW
 TYPEID C).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method4
 '(' 
 OBJECTID num1
 ':' 
 TYPEID Int,
 OBJECTID num2
 ':' 
 TYPEID Int)
 ':' 
 TYPEID D
 '{' 
 IF
 OBJECTID num2
 OBJECTID num1
 THEN
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num1
 '-' 
 OBJECTID num2;
 '(' 
 NEW
 TYPEID D).set_var(x);
 '}' 
 ')' 
 ELSE
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num2
 '-' 
 OBJECTID num1;
 '(' 
 NEW
 TYPEID D).set_var(x);
 '}' 
 ')' 
 FI
 '}' 
 ';' 
 OBJECTID method5
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID E
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 1
 IN
 '{' 
 '(' 
 LET
 OBJECTID y
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 1
 IN
 WHILE
 OBJECTID y
 OBJECTID num
 LOOP
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID x
 OBJECTID y;
 OBJECTID y
 ASSIGN
 OBJECTID y
 INT_CONST 1
 ';' 
 '}' 
 POOL
 ')' 
 ';' 
 '(' 
 NEW
 TYPEID E).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID B
 INHERITS
 TYPEID A
 '{' 
 OBJECTID method5
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID E
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num
 OBJECTID num;
 '(' 
 NEW
 TYPEID E).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID C
 INHERITS
 TYPEID B
 '{' 
 OBJECTID method6
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID A
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num;
 '(' 
 NEW
 TYPEID A).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID method5
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID E
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num
 OBJECTID num
 OBJECTID num;
 '(' 
 NEW
 TYPEID E).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID D
 INHERITS
 TYPEID B
 '{' 
 OBJECTID method7
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID Bool
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID num
 IN
 IF
 OBJECTID x
 INT_CONST 0
 THEN
 OBJECTID method7
 '(' 
 OBJECTID x)
 ELSE
 IF
 INT_CONST 0
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 1
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 IF
 INT_CONST 2
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID method7
 '(' 
 OBJECTID x
 '-' 
 INT_CONST 3
 ')' 
 FI
 FI
 FI
 FI
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID E
 INHERITS
 TYPEID D
 '{' 
 OBJECTID method6
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID A
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 '{' 
 OBJECTID x
 ASSIGN
 OBJECTID num
 INT_CONST 8
 ';' 
 '(' 
 NEW
 TYPEID A).set_var(x);
 '}' 
 ')' 
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID A2I
 '{' 
 OBJECTID c2i
 '(' 
 OBJECTID char
 ':' 
 TYPEID String)
 ':' 
 TYPEID Int
 '{' 
 IF
 OBJECTID char
 INT_CONST 0
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID char
 INT_CONST 1
 THEN
 INT_CONST 1
 ELSE
 IF
 OBJECTID char
 INT_CONST 2
 THEN
 INT_CONST 2
 ELSE
 IF
 OBJECTID char
 INT_CONST 3
 THEN
 INT_CONST 3
 ELSE
 IF
 OBJECTID char
 INT_CONST 4
 THEN
 INT_CONST 4
 ELSE
 IF
 OBJECTID char
 INT_CONST 5
 THEN
 INT_CONST 5
 ELSE
 IF
 OBJECTID char
 INT_CONST 6
 THEN
 INT_CONST 6
 ELSE
 IF
 OBJECTID char
 INT_CONST 7
 THEN
 INT_CONST 7
 ELSE
 IF
 OBJECTID char
 INT_CONST 8
 THEN
 INT_CONST 8
 ELSE
 IF
 OBJECTID char
 INT_CONST 9
 THEN
 INT_CONST 9
 ELSE
 '{' 
 OBJECTID abort
 '(' 
 ')' 
 ';' 
 INT_CONST 0
 ';' 
 '}' 
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 '}' 
 ';' 
 OBJECTID i2c
 '(' 
 OBJECTID i
 ':' 
 TYPEID Int)
 ':' 
 TYPEID String
 '{' 
 IF
 OBJECTID i
 INT_CONST 0
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID i
 INT_CONST 1
 THEN
 INT_CONST 1
 ELSE
 IF
 OBJECTID i
 INT_CONST 2
 THEN
 INT_CONST 2
 ELSE
 IF
 OBJECTID i
 INT_CONST 3
 THEN
 INT_CONST 3
 ELSE
 IF
 OBJECTID i
 INT_CONST 4
 THEN
 INT_CONST 4
 ELSE
 IF
 OBJECTID i
 INT_CONST 5
 THEN
 INT_CONST 5
 ELSE
 IF
 OBJECTID i
 INT_CONST 6
 THEN
 INT_CONST 6
 ELSE
 IF
 OBJECTID i
 INT_CONST 7
 THEN
 INT_CONST 7
 ELSE
 IF
 OBJECTID i
 INT_CONST 8
 THEN
 INT_CONST 8
 ELSE
 IF
 OBJECTID i
 INT_CONST 9
 THEN
 INT_CONST 9
 ELSE
 '{' 
 OBJECTID abort
 '(' 
 ')' 
 ';' 
 ';' 
 '}' 
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 '}' 
 ';' 
 OBJECTID a2i
 '(' 
 OBJECTID s
 ':' 
 TYPEID String)
 ':' 
 TYPEID Int
 '{' 
 IF
 OBJECTID s.length
 '(' 
 ')' 
 INT_CONST 0
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID s.substr
 '(' 
 INT_CONST 0
 INT_CONST 1
 ')' 
 '-' 
 THEN
 OBJECTID a2i_aux
 '(' 
 OBJECTID s.substr
 '(' 
 INT_CONST 1
 OBJECTID s.length
 '(' 
 ')' 
 '-' 
 INT_CONST 1
 ')' 
 ')' 
 ELSE
 IF
 OBJECTID s.substr
 '(' 
 INT_CONST 0
 INT_CONST 1
 ')' 
 THEN
 OBJECTID a2i_aux
 '(' 
 OBJECTID s.substr
 '(' 
 INT_CONST 1
 OBJECTID s.length
 '(' 
 ')' 
 '-' 
 INT_CONST 1
 ')' 
 ')' 
 ELSE
 OBJECTID a2i_aux
 '(' 
 OBJECTID s)
 FI
 FI
 FI
 '}' 
 ';' 
 OBJECTID a2i_aux
 '(' 
 OBJECTID s
 ':' 
 TYPEID String)
 ':' 
 TYPEID Int
 '{' 
 '(' 
 LET
 OBJECTID int
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 IN
 '{' 
 '(' 
 LET
 OBJECTID j
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID s.length
 '(' 
 ')' 
 IN
 '(' 
 LET
 OBJECTID i
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 IN
 WHILE
 OBJECTID i
 OBJECTID j
 LOOP
 '{' 
 OBJECTID int
 ASSIGN
 OBJECTID int
 INT_CONST 10
 OBJECTID c2i
 '(' 
 OBJECTID s.substr
 '(' 
 OBJECTID i,1));
 OBJECTID i
 ASSIGN
 OBJECTID i
 INT_CONST 1
 ';' 
 '}' 
 POOL
 ')' 
 ')' 
 ';' 
 OBJECTID int;
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID i2a
 '(' 
 OBJECTID i
 ':' 
 TYPEID Int)
 ':' 
 TYPEID String
 '{' 
 IF
 OBJECTID i
 INT_CONST 0
 THEN
 INT_CONST 0
 ELSE
 IF
 INT_CONST 0
 OBJECTID i
 THEN
 OBJECTID i2a_aux
 '(' 
 OBJECTID i)
 ELSE
 '-' 
 OBJECTID concat
 '(' 
 OBJECTID i2a_aux
 '(' 
 OBJECTID i
 INT_CONST 1
 ')' 
 ')' 
 FI
 FI
 '}' 
 ';' 
 OBJECTID i2a_aux
 '(' 
 OBJECTID i
 ':' 
 TYPEID Int)
 ':' 
 TYPEID String
 '{' 
 IF
 OBJECTID i
 INT_CONST 0
 THEN
 ELSE
 '(' 
 LET
 OBJECTID next
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID i
 INT_CONST 10
 IN
 OBJECTID i2a_aux
 '(' 
 OBJECTID next).concat
 '(' 
 OBJECTID i2c
 '(' 
 OBJECTID i
 '-' 
 OBJECTID next
 INT_CONST 10
 ')' 
 ')' 
 ')' 
 FI
 '}' 
 ';' 
 '}' 
 ';' 
 CLASS
 TYPEID Main
 INHERITS
 TYPEID IO
 '{' 
 OBJECTID char
 ':' 
 TYPEID String;
 OBJECTID avar
 ':' 
 TYPEID A;
 OBJECTID a_var
 ':' 
 TYPEID A;
 OBJECTID flag
 ':' 
 TYPEID Bool
 ASSIGN
 BOOL_CONST true
 ';' 
 OBJECTID menu
 '(' 
 ')' 
 ':' 
 TYPEID String
 '{' 
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID n\tTo
 OBJECTID add
 OBJECTID a
 OBJECTID number
 OBJECTID to
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID enter
 OBJECTID a:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID negate
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID enter
 OBJECTID b:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID difference
 OBJECTID between
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID and
 OBJECTID another
 OBJECTID number...enter
 OBJECTID c:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID the
 OBJECTID factorial
 OF
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID enter
 OBJECTID d:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID square
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID enter
 OBJECTID e:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID cube
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID enter
 OBJECTID f:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID find
 OBJECTID out
 IF
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID is
 OBJECTID a
 OBJECTID multiple
 OF
 INT_CONST 3
 OBJECTID enter
 OBJECTID g:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID divide
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID by
 INT_CONST 8
 OBJECTID enter
 OBJECTID h:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID get
 OBJECTID a
 NEW
 OBJECTID number...enter
 OBJECTID j:\n");
 OBJECTID out_string
 '(' 
 OBJECTID tTo
 OBJECTID quit...enter
 OBJECTID q:\n\n");
 OBJECTID in_string
 '(' 
 ')' 
 ';' 
 '}' 
 '}' 
 ';' 
 OBJECTID prompt
 '(' 
 ')' 
 ':' 
 TYPEID String
 '{' 
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID n");
 OBJECTID out_string
 '(' 
 TYPEID Please
 OBJECTID enter
 OBJECTID a
 OBJECTID number...
 ')' 
 ';' 
 OBJECTID in_string
 '(' 
 ')' 
 ';' 
 '}' 
 '}' 
 ';' 
 OBJECTID get_int
 '(' 
 ')' 
 ':' 
 TYPEID Int
 '{' 
 '{' 
 '(' 
 LET
 OBJECTID z
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 '(' 
 LET
 OBJECTID s
 ':' 
 TYPEID String
 ASSIGN
 OBJECTID prompt
 '(' 
 ')' 
 IN
 OBJECTID z.a2i
 '(' 
 OBJECTID s)
 ')' 
 ')' 
 ';' 
 '}' 
 '}' 
 ';' 
 OBJECTID is_even
 '(' 
 OBJECTID num
 ':' 
 TYPEID Int)
 ':' 
 TYPEID Bool
 '{' 
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID num
 IN
 IF
 OBJECTID x
 INT_CONST 0
 THEN
 OBJECTID is_even
 '(' 
 OBJECTID x)
 ELSE
 IF
 INT_CONST 0
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 1
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID is_even
 '(' 
 OBJECTID x
 '-' 
 INT_CONST 2
 ')' 
 FI
 FI
 FI
 ')' 
 '}' 
 ';' 
 OBJECTID class_type
 '(' 
 OBJECTID var
 ':' 
 TYPEID A)
 ':' 
 TYPEID SELF_TYPE
 '{' 
 CASE
 OBJECTID var
 OF
 OBJECTID a
 ':' 
 TYPEID A
 OBJECTID out_string
 '(' 
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID A\n");
 OBJECTID b
 ':' 
 TYPEID B
 OBJECTID out_string
 '(' 
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID B\n");
 OBJECTID c
 ':' 
 TYPEID C
 OBJECTID out_string
 '(' 
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID C\n");
 OBJECTID d
 ':' 
 TYPEID D
 OBJECTID out_string
 '(' 
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID D\n");
 OBJECTID e
 ':' 
 TYPEID E
 OBJECTID out_string
 '(' 
 TYPEID Class
 OBJECTID type
 OBJECTID is
 OBJECTID now
 TYPEID E\n");
 OBJECTID o
 ':' 
 TYPEID Object
 OBJECTID out_string
 '(' 
 TYPEID Oooops\n");
 ESAC
 '}' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID var
 ':' 
 TYPEID A)
 ':' 
 TYPEID SELF_TYPE
 '{' 
 '(' 
 LET
 OBJECTID z
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID z.i2a
 '(' 
 OBJECTID var.value
 '(' 
 ')' 
 ')' 
 ')' 
 ';' 
 OBJECTID out_string
 '(' 
 ')' 
 ';' 
 '}' 
 ')' 
 '}' 
 ';' 
 OBJECTID main
 '(' 
 ')' 
 ':' 
 TYPEID Object
 '{' 
 '{' 
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID A);
 WHILE
 OBJECTID flag
 LOOP
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID number
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 IF
 OBJECTID is_even
 '(' 
 OBJECTID avar.value
 '(' 
 ')' 
 ')' 
 THEN
 OBJECTID out_string
 '(' 
 OBJECTID is
 OBJECTID even!\n")
 ELSE
 OBJECTID out_string
 '(' 
 OBJECTID is
 OBJECTID odd!\n")
 FI
 ';' 
 OBJECTID class_type
 '(' 
 OBJECTID avar);
 OBJECTID char
 ASSIGN
 OBJECTID menu
 '(' 
 ')' 
 ';' 
 IF
 OBJECTID char
 OBJECTID a"
 THEN
 '{' 
 OBJECTID a_var
 ASSIGN
 '(' 
 NEW
 TYPEID A).set_var(get_int());
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID B).method2(avar.value(),
 OBJECTID a_var.value
 '(' 
 ')' 
 ')' 
 ';' 
 '}' 
 ELSE
 IF
 OBJECTID char
 OBJECTID b"
 THEN
 CASE
 OBJECTID avar
 OF
 OBJECTID c
 ':' 
 TYPEID C
 OBJECTID avar
 ASSIGN
 OBJECTID c.method6
 '(' 
 OBJECTID c.value
 '(' 
 ')' 
 ')' 
 ';' 
 OBJECTID a
 ':' 
 TYPEID A
 OBJECTID avar
 ASSIGN
 OBJECTID a.method3
 '(' 
 OBJECTID a.value
 '(' 
 ')' 
 ')' 
 ';' 
 OBJECTID o
 ':' 
 TYPEID Object
 '{' 
 OBJECTID out_string
 '(' 
 TYPEID Oooops\n");
 OBJECTID abort
 '(' 
 ')' 
 ';' 
 INT_CONST 0
 ';' 
 '}' 
 ';' 
 ESAC
 ELSE
 IF
 OBJECTID char
 OBJECTID c"
 THEN
 '{' 
 OBJECTID a_var
 ASSIGN
 '(' 
 NEW
 TYPEID A).set_var(get_int());
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID D).method4(avar.value(),
 OBJECTID a_var.value
 '(' 
 ')' 
 ')' 
 ';' 
 '}' 
 ELSE
 IF
 OBJECTID char
 OBJECTID d"
 THEN
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID C)@A.method5(avar.value())
 ELSE
 IF
 OBJECTID char
 OBJECTID e"
 THEN
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID C)@B.method5(avar.value())
 ELSE
 IF
 OBJECTID char
 OBJECTID f"
 THEN
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID C)@C.method5(avar.value())
 ELSE
 IF
 OBJECTID char
 OBJECTID g"
 THEN
 IF
 '(' 
 '(' 
 NEW
 TYPEID D).method7(avar.value()))
 THEN
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID number
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID is
 OBJECTID divisible
 OBJECTID by
 INT_CONST 3
 OBJECTID n");
 '}' 
 ELSE
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID number
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID is
 NOT
 OBJECTID divisible
 OBJECTID by
 INT_CONST 3
 OBJECTID n");
 '}' 
 FI
 ELSE
 IF
 OBJECTID char
 OBJECTID h"
 THEN
 '(' 
 LET
 OBJECTID x
 ':' 
 TYPEID A
 IN
 '{' 
 OBJECTID x
 ASSIGN
 '(' 
 NEW
 TYPEID E).method6(avar.value());
 '(' 
 LET
 OBJECTID r
 ':' 
 TYPEID Int
 ASSIGN
 '(' 
 OBJECTID avar.value
 '(' 
 ')' 
 '-' 
 '(' 
 OBJECTID x.value
 '(' 
 ')' 
 INT_CONST 8
 ')' 
 ')' 
 IN
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID number
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID avar);
 OBJECTID out_string
 '(' 
 OBJECTID is
 OBJECTID equal
 OBJECTID to
 ')' 
 ';' 
 OBJECTID print
 '(' 
 OBJECTID x);
 OBJECTID out_string
 '(' 
 OBJECTID times
 INT_CONST 8
 OBJECTID with
 OBJECTID a
 OBJECTID remainder
 OF
 ')' 
 ';' 
 '(' 
 LET
 OBJECTID a
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 '{' 
 OBJECTID out_string
 '(' 
 OBJECTID a.i2a
 '(' 
 OBJECTID r));
 OBJECTID out_string
 '(' 
 OBJECTID n");
 '}' 
 ')' 
 ';' 
 '}' 
 ')' 
 ';' 
 OBJECTID avar
 ASSIGN
 OBJECTID x;
 '}' 
 ')' 
 ELSE
 IF
 OBJECTID char
 OBJECTID j"
 THEN
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID A)
 ELSE
 IF
 OBJECTID char
 OBJECTID q"
 THEN
 OBJECTID flag
 ASSIGN
 BOOL_CONST false
 ELSE
 OBJECTID avar
 ASSIGN
 '(' 
 NEW
 TYPEID A).method1(avar.value())
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 ';' 
 '}' 
 POOL
 ';' 
 '}' 
 '}' 
 ';' 
 '}' 
 ';'