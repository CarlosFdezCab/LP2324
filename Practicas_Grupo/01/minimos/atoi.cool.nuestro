#name "atoi.cool"
 OBJECTID he class A2I provides integer-to-string and string-to-integer
 OBJECTID conversion routines.  To use these routines, either inherit them
 IN
 OBJECTID the class where needed, have a dummy variable bound to
 OBJECTID something of type A2I, or simpl write (new A2I).method(argument).
 OBJECTID c2i   Converts a 1-character string to an integer.  Aborts
 IF
 OBJECTID the string is not "0" through "9"
 CLASS
 INT_CONST 2
 OBJECTID c2i(char : String) : Int {
 IF
 OBJECTID char = "0" then 0 else
 IF
 OBJECTID char = "1" then 1 else
 IF
 OBJECTID char = "2" then 2 else
 IF
 OBJECTID char = "3" then 3 else
 IF
 OBJECTID char = "4" then 4 else
 IF
 OBJECTID char = "5" then 5 else
 IF
 OBJECTID char = "6" then 6 else
 IF
 OBJECTID char = "7" then 7 else
 IF
 OBJECTID char = "8" then 8 else
 IF
 OBJECTID char = "9" then 9 else
 OBJECTID abort(); 0; }  -- the 0 is needed to satisfy the typchecker
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 OBJECTID i2c is the inverse of c2i.
 OBJECTID i2c(i : Int) : String {
 IF
 OBJECTID i = 0 then "0" else
 IF
 OBJECTID i = 1 then "1" else
 IF
 OBJECTID i = 2 then "2" else
 IF
 OBJECTID i = 3 then "3" else
 IF
 OBJECTID i = 4 then "4" else
 IF
 OBJECTID i = 5 then "5" else
 IF
 OBJECTID i = 6 then "6" else
 IF
 OBJECTID i = 7 then "7" else
 IF
 OBJECTID i = 8 then "8" else
 IF
 OBJECTID i = 9 then "9" else
 OBJECTID abort(); ""; }  -- the "" is needed to satisfy the typchecker
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 OBJECTID a2i converts an ASCII string into an integer.  The empty string
 OBJECTID is converted to 0.  Signed and unsigned strings are handled.  The
 OBJECTID method aborts if the string does not represent an integer.  Very
 OBJECTID long strings of digits produce strange answers because of arithmetic 
 OBJECTID overflow.
 OBJECTID a2i(s : String) : Int {
 IF
 OBJECTID s.length() = 0 then 0 else
 IF
 OBJECTID s.substr(0,1) = "-" then ~a2i_aux(s.substr(1,s.length()-1)) else
 IF
 OBJECTID s.substr(0,1) = "+" then a2i_aux(s.substr(1,s.length()-1)) else
 OBJECTID a2i_aux(s)
 FI
 FI
 FI
 OBJECTID a2i_aux converts the usigned portion of the string.  As a programming
 OBJECTID example, this method is written iteratively.
 OBJECTID a2i_aux(s : String) : Int {
 LET
 BOOL_CONST false
 BOOL_CONST false
 '-' 
 INT_CONST 0
 IN
 LET
 OBJECTID j : Int <- s.length() in
 LET
 OBJECTID i : Int <- 0 in
 WHILE
 OBJECTID i < j loop
 BOOL_CONST false
 '-' 
 BOOL_CONST false
 INT_CONST 10
 OBJECTID c2i(s.substr(i,1));
 OBJECTID i <- i + 1;
 POOL
 BOOL_CONST false
 OBJECTID i2a converts an integer to a string.  Positive and negative 
 OBJECTID numbers are handled correctly.  
 OBJECTID i2a(i : Int) : String {
 IF
 OBJECTID i = 0 then "0" else 
 IF
 INT_CONST 0
 OBJECTID i then i2a_aux(i) else
 '-' 
 OBJECTID concat(i2a_aux(i * ~1)) 
 FI
 FI
 OBJECTID i2a_aux is an example using recursion.
 OBJECTID i2a_aux(i : Int) : String {
 IF
 OBJECTID i = 0 then "" else 
 LET
 OBJECTID next : Int <- i / 10 in
 OBJECTID i2a_aux(next).concat(i2c(i - next * 10))
 FI